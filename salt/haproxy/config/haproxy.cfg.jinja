{% set haproxy = salt["pillar.get"]("haproxy", {}) -%}
{% set psf_internal = salt["pillar.get"]("psf_internal_network") -%}

global
    log /dev/log    local0
    log /dev/log    local1 notice

    chroot /var/lib/haproxy

    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s

    user haproxy
    group haproxy

    daemon

    maxconn 4096

    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    ssl-default-bind-ciphers {{ pillar["tls"]["ciphers"].get("haproxy/bind", pillar["tls"]["ciphers"]["default"]) }}
    ssl-default-server-ciphers {{ pillar["tls"]["ciphers"].get("haproxy/server", pillar["tls"]["ciphers"]["default"]) }}
    ssl-server-verify required

    # increase DH Param bits to match certificate bits
    tune.ssl.default-dh-param 2048

    # Configure some default bind options
    #   - Disable SSLv3.0
    #   - Disable TLSv1.0
    #   - Disable TLSv1.1
    #   - Disable TLS Tickets
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    # lower your record size to improve Time to First Byte (TTFB)
    tune.ssl.maxrecord 1400

    # Allow SSL sessions to last for ~2 hours in order to improve the session
    # hit rate.
    tune.ssl.lifetime 2h

    # Allow more entries in the session cache to improve session cache hit rate
    tune.ssl.cachesize 500000

    # Lower the amount of space we reserve for header rewriting
    tune.maxrewrite 1024


defaults
    log     global

    mode    http

    retries 3

    option  httpchk
    option  httplog
    option  http-server-close
    option  splice-auto
    option  redispatch
    option  forwardfor

    balance roundrobin

    timeout connect 5000
    timeout client  50000
    timeout server  50000

    monitor-uri /_haproxy_status

    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http


listen tls:
    # Advertise http/1.1 over NPN to enable TLS False Start
    bind :20003 ssl alpn h2,http/1.1 crt star.python.org.pem
    bind :20005 ssl alpn h2,http/1.1 crt star.pypa.io.pem
    bind :20006 ssl alpn h2,http/1.1 crt speed.pypy.org.pem
    bind :20007 ssl alpn h2,http/1.1 crt www.pycon.org.pem
    bind :20008 ssl alpn h2,http/1.1 crt jython.org.pem
    bind :20009 ssl alpn h2,http/1.1 crt pypy.org.pem
    bind 0.0.0.0:443 ssl alpn h2,http/1.1 crt star.python.org.pem crt star.pypa.io.pem crt star.pyfound.org.pem crt speed.pypy.org.pem crt www.pycon.org.pem crt jython.org.pem crt pypy.org.pem crt salt-public.psf.io.pem crt planetpython.org.pem
    bind :::443 ssl alpn h2,http/1.1 crt star.python.org.pem crt star.pypa.io.pem crt star.pyfound.org.pem  crt speed.pypy.org.pem crt www.pycon.org.pem crt jython.org.pem crt pypy.org.pem crt salt-public.psf.io.pem crt planetpython.org.pem
    bind :20010 ssl alpn h2,http/1.1 crt star.python.org.pem crt star.pypa.io.pem crt star.pyfound.org.pem crt speed.pypy.org.pem crt www.pycon.org.pem crt jython.org.pem crt pypy.org.pem crt salt-public.psf.io.pem crt planetpython.org.pem

    mode http

    option httplog

    # Capture the user agent in the log
    capture request header User-Agent len 512
    # Capture X-Forwarded-For in the log
    capture request header X-Forwarded-For len 64

    http-request set-header X-Client-IP %[src]

    server default 127.0.0.1:19001


frontend main
    bind :20000
    bind 0.0.0.0:80
    bind :::80
    bind 127.0.0.1:19001  # This is our TLS socket.

    # Custom logging format, this is the same as the normal "httplog" in
    # HAProxy except information about the TLS connection is included.
    log-format %ci:%cp\ [%t]\ %ft\ %b/%s\ %Tq/%Tw/%Tc/%Tr/%Tt\ %sslv/%sslc\ %ST\ %B\ %CC\ %CS\ %tsc\ %ac/%fc/%bc/%sc/%rc\ %sq/%bq\ %hr\ %hs\ %{+Q}r

    # Capture the user agent in the log
    capture request header User-Agent len 512
    # Capture X-Forwarded-For in the log
    capture request header X-Forwarded-For len 64

    acl letsencrypt-well-known-acl path_beg /.well-known/acme-challenge/
    use_backend letsencrypt-well-known if letsencrypt-well-known-acl

    # Determine if this request has TLS on the client side or not.
    acl is_tls dst_port 19001

    acl our_domains hdr(host) -i -f /etc/haproxy/our_domains

    # Deny requests that are not served from this host
    http-request deny if !our_domains !letsencrypt-well-known-acl

    # Tell the backend servers whether this request is being served via TLS or
    # not. This should pretty much *always* be yes since we unconditionally
    # redirect to HTTPS in HAProxy.
    http-request set-header X-Client-IP %[src] if !is_tls
    http-request set-header X-Forwarded-Proto https if is_tls
    http-request set-header X-Forwarded-Proto http  if !is_tls

    # Redirect all HTTP traffic to HTTPS
    redirect code 301 scheme https if !is_tls !letsencrypt-well-known-acl

    # Dispatch to the redirect backend for any redirects we have, we're going
    # to do this here after the HTTP -> HTTPS redirect even though this will
    # result in an extra redirect because we want to give this domain a chance
    # to assert a HSTS response.
    {% for domain in haproxy.redirects -%}
    use_backend redirect if { hdr(host) -i {{ domain }} }
    {% endfor %}

    # Dispatch requests to the proper backend.
    {% for service, config in haproxy.services.items() -%}
    {% for domain in config.domains -%}
    use_backend {{ service }} if { hdr(host) -i {{ domain }} }{% if "path" in config %} { path_beg -i {{ config.path }} }{% endif %}
    {% endfor -%}
    {% endfor %}


frontend fastly
    bind :20004 ssl force-tlsv12 crt lb.psf.io.pem

    # Adjust timeouts, Fastly can maintain long persistent connections to the
    # backend server and thus we can keep these open for a long time.
    timeout client 86400

    # Determine if this request is valid, We mandate that a Fastly-Token is
    # sent with all requests coming from Fastly and that this token matched the
    # value we expect.
    http-request deny unless { hdr(Fastly-Token) -f /etc/haproxy/fastly_token }

    # Determine if this request has TLS on the client side or not.
    acl is_tls hdr_cnt(Fastly-SSL) gt 0

    # Remove any of the X-Forwarded-* headers from this request, Fastly gives
    # us these headers in a different way.
    http-request del-header X-Forwarded-For
    http-request del-header X-Forwarded-Proto

    # Tell the backend servers the original client IP address.
    http-request set-header X-Forwarded-For %[hdr(Fastly-Client-IP)] if { hdr_cnt(Fastly-Client-IP) gt 0 }

    # Tell the backend servers whether this request is being served via TLS or
    # not. This should pretty much *always* be yes since Fastly should be
    # configured to unconditionally redirect to HTTPS.
    http-request set-header X-Forwarded-Proto https if is_tls
    http-request set-header X-Forwarded-Proto http  if !is_tls

    # Strip out the headers from Fastly, we don't want to pass these to the
    # backend, any value from them that needs to be passed backwards should be
    # aliased to a "standard"-ish value and implemented whether it's coming via
    # Fastly or not.
    http-request del-header Fastly-Client-IP
    http-request del-header Fastly-SSL
    http-request del-header Fastly-Token

    # Dispatch to the redirect backend for any redirects we have.
    {% for domain in haproxy.redirects -%}
    use_backend redirect if { hdr(host) -i {{ domain }} }
    {% endfor %}

    # Dispatch requests to the proper backend.
    {% for service, config in haproxy.services.items() -%}
    {% for domain in config.domains -%}
    use_backend {{ service }} if { hdr(host) -i {{ domain }} }{% if "path" in config %} { path_beg -i {{ config.path }} }{% endif %}
    {% endfor -%}
    {% endfor %}


backend redirect
    server redirect 127.0.0.1:19002


{% for service, config in haproxy.services.items() %}
backend {{ service }}
    {% if config.get("check") -%}
    option httpchk {{ config.check }}
    {%- endif %}

    # http://gnuterrypratchett.com/
    http-response set-header X-Clacks-Overhead GNU\ Terry\ Pratchett

    {% if config.get("hsts", True) -%}
    # Add HSTS headers for anything that is configured to have them.
    http-response set-header Strict-Transport-Security max-age={{ config.get("hsts_seconds", 315360000) }}{% if config.get("hsts_subdomains", True) %};\ includeSubDomains{% endif %}{% if config.get("hsts_preload", True) %};\ preload{% endif %}
    {%- endif %}

    {% for item in config.get("extra", []) -%}
    {{ item }}
    {% endfor -%}

    {{ "{{" }}range service "{{ service }}@{{ pillar.dc }}" "any"}}
    {% raw %}server {{.Node}} {{.Address}}:{{.Port}}{% endraw %}{% if config.get("check", True) %} check{% if config.get("sni", False)%} check-sni {{ config.get("sni") }}{% endif %}{% if config.get("sni", False)%} sni str({{ config.get("sni") }}){% endif %}{% endif %}{% if config.get("tls", True) %} ssl force-tlsv12 verifyhost {{ config.get("verify_host", service + ".psf.io") }} ca-file {{ config.get("ca-file", "PSF_CA.pem") }}{% endif %}{{ "{{end}}" }}

{% endfor %}


{% for name, config in haproxy.listens.items() -%}
listen {{ name }}
    bind {{ config.bind }}

    mode tcp
    option tcplog
    option tcp-check

    {% for line in config.get("extra", []) -%}
    {{ line }}
    {% endfor %}

    {{ "{{" }}range service "{{ config.service }}@{{ pillar.dc }}"}}
    {% raw %}server {{.Node}} {{.Address}}:{{.Port}} check{{end}}{% endraw %}

{% endfor %}


listen stats
    bind 127.0.0.1:4646
    bind {{ salt["network.ip_addrs"](cidr=psf_internal)|first }}:4646

    mode            http
    log             global

    stats enable
    stats hide-version
    stats refresh 30s
    stats show-node
    stats uri  /haproxy?stats
